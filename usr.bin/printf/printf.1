.\" Copyright (c) 1989, 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)printf.1	5.10 (Berkeley) 6/27/91
.\"
.Vx
.Dd June 27, 1991
.Dt PRINTF 1
.AT 1
.Sh NAME
.Nm printf
.Nd formatted output
.Sh SYNOPSIS
.Pp
.Nm printf format
.Op  arguments  ...
.Sh DESCRIPTION
.Nm Printf
formats and prints its arguments, after the first, under control
of the
.Ar format  .
The
.Ar format
is a character string which contains three types of objects: plain characters,
which are simply copied to standard output, character escape sequences which
are converted and copied to the standard output, and format specifications,
each of which causes printing of the next successive
.Ar argument  .
.Pp
The
.Ar arguments
after the first are treated as strings if the corresponding format is
either
.Cm c
or
.Cm s  ;
otherwise it is evaluated as a C constant, with the following extensions:
.Pp
.Df I
A leading plus or minus sign is allowed.
.br
If the leading character is a single or double quote, or not a digit,
plus, or minus sign, the value is the ASCII code of the next character.
.De
.Pp
The format string is reused as often as necessary to satisfy the
.Ar arguments  .
Any extra format specifications are evaluated with zero or the null
string.
.Pp
Character escape sequences are in backslash notation as defined in the
draft proposed ANSI C Standard X3J11.  The characters and their meanings
are as follows:
.Tw Ds
.Tp Cm \ea
Write a <bell> character.
.Tp Cm \eb
Write a <backspace> character.
.Tp Cm \ef
Write a <form-feed> character.
.Tp Cm \en
Write a <new-line> character.
.Tp Cm \er
Write a <carriage return> character.
.Tp Cm \et
Write a <tab> character.
.Tp Cm \ev
Write a <vertical tab> character.
.Tp Cm \e\'
Write a <single quote> character.
.Tp Cm \e\e
Write a backslash character.
.Tp Cx Cm \e
.Ar num
.Cx
Write an 8-bit character whose ASCII value is the 1-, 2-, or 3-digit
octal number
.Ar num  .
.Tp
.Pp
Each format specification is introduced by the percent character
(``%'').
The remainder of the format specification includes, in the
following order:
.Pp
Zero or more of the following flags:
.Pp
.Ds I
.Tw Ds
.Tp Cm #
A `#' character
specifying that the value should be printed in an ``alternate form''.
For
.Cm c  ,
.Cm d ,
and
.Cm s  ,
formats, this option has no effect.  For the
.Cm o
formats the precision of the number is increased to force the first
character of the output string to a zero.  For the
.Cm x
.Pq Cm X
format, a non-zero result has the string
.Li 0x
.Pq Li 0X
prepended to it.  For
.Cm e  ,
.Cm E ,
.Cm f  ,
.Cm g ,
and
.Cm G  ,
formats, the result will always contain a decimal point, even if no
digits follow the point (normally, a decimal point only appears in the
results of those formats if a digit follows the decimal point).  For
.Cm g
and
.Cm G
formats, trailing zeros are not removed from the result as they
would otherwise be;
.Tp Cm \&\-
A minus sign `\-' which specifies
.Em left adjustment
of the output in the indicated field;
.Tp Cm \&+
A `+' character specifying that there should always be
a sign placed before the number when using signed formats.
.Tp Sq \&\ \&
A space specifying that a blank should be left before a positive number
for a signed format.  A `+' overrides a space if both are used;
.Tp Cm \&0
A zero `0' character indicating that zero-padding should be used
rather than blank-padding.  A `\-' overrides a `0' if both are used;
.Tp
.De
.Pp 
.Tw Ds
.Tp Field Width:
An optional digit string specifying a
.Em field width ;
if the output string has fewer characters than the field width it will
be blank-padded on the left (or right, if the left-adjustment indicator
has been given) to make up the field width (note that a leading zero
is a flag, but an embedded zero is part of a field width);
.Tp Precision:
An optional period,
.Sq Cm \&.\& ,
followed by an optional digit string giving a
.Em precision
which specifies the number of digits to appear after the decimal point,
for
.Cm e
and 
.Cm f
formats, or the maximum number of characters to be printed
from a string; if the digit string is missing, the precision is treated
as zero;
.Tp Format:
A character which indicates the type of format to use (one of
.Cm diouxXfwEgGcs ) .
.Tp
.Pp
A field width or precision may be
.Sq Cm \&*
instead of a digit string.
In this case an
.Ar argument
supplies the field width or precision.
.Pp
The format characters and their meanings are:
.Tw Fl
.Tp Cm diouXx
The
.Ar argument
is printed as a signed decimal (d or i), unsigned decimal, unsigned octal,
or unsigned hexadecimal (X or x), respectively.
.Tp Cm f
The
.Ar argument
is printed in the style `[\-]ddd.ddd' where the number of d's
after the decimal point is equal to the precision specification for
the argument.
If the precision is missing, 6 digits are given; if the precision
is explicitly 0, no digits and no decimal point are printed.
.Tp Cm eE
The
.Ar argument
is printed in the style
.Cx `[-]d.ddd
.Cm e
.Cx \(+-dd\'
.Cx
where there
is one digit before the decimal point and the number after is equal to
the precision specification for the argument; when the precision is
missing, 6 digits are produced.
An upper-case E is used for an `E' format.
.Tp Cm gG
The
.Ar argument
is printed in style
.Cm f
or in style
.Cm e
.Pq Cm E
whichever gives full precision in minimum space.
.Tp Cm c
The first character of
.Ar argument
is printed.
.Tp Cm s
Characters from the string
.Ar argument
are printed until the end is reached or until the number of characters
indicated by the precision specification is reached; however if the
precision is 0 or missing, all characters in the string are printed.
.Tp Cm \&%
Print a `%'; no argument is used.
.Tp
.Pp
In no case does a non-existent or small field width cause truncation of
a field; padding takes place only if the specified field width exceeds
the actual width.
.Sh RETURN VALUE
.Nm Printf
exits 0 on success, 1 on failure.
.Sh SEE ALSO
.Xr printf 3
.Sh HISTORY
.Nm Printf
as a command, appears in 4.3+Reno BSD.  It is modeled
after the standard library function,
.Xr printf 3 .
.Sh BUGS
Since the number is translated from ASCII to floating-point, and
then back again, floating-point precision may be lost.
.Pp
ANSI hexadecimal character constants were deliberately not provided.
